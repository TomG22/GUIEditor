#pragma once

#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <thread>
#include <vector>

#include <functional>
#include <queue>
#include <mutex>
#include <utility>



#include "Frame.h"
#include "WindowListener.h"

class Window {
private:
    static void keyCallback(GLFWwindow *window, int key, int scancode, int action, int mods);
    static void framebufferSizeCallback(GLFWwindow* window, int width, int height);

public:
    GLFWwindow* window;
    std::vector<WindowListener*> listeners;
    std::vector<Frame*> frames;

    std::mutex cmdQueueMut;
    std::queue<std::function<void()>> cmdQueue;

    Window();

    void RegisterListener(WindowListener* listener);
    void initGLFW();
    void startWindowLoop();
    bool isKeyDown(int keyCode);
    void handleKey(int key, int scancode, int action, int mods);

    void addFrame(Frame* frame);

    void Window::postToRenderThread(std::function<void()> command);
};
